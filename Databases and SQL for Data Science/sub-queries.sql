USE HR;

-- Sub-query: a query inside another query
-- You can use a sub-query to evaluate aggregate functions
SELECT EMP_ID, F_NAME, L_NAME, SALARY FROM EMPLOYEES
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

-- You can substitute a column name with a sub-query 
SELECT EMP_ID, SALARY, (SELECT AVG(SALARY) FROM EMPLOYEES) AS AVG_SALARY
FROM EMPLOYEES;

-- You can substitute the table name with a sub-query
SELECT * FROM (SELECT EMP_ID, F_NAME, L_NAME, DEP_ID FROM EMPLOYEES) AS EMP4ALL;

-- Working with multiple tables: ways to access multiple tables in the same query
-- 1. Sub-query
SELECT * FROM EMPLOYEES 
WHERE MANAGER_ID IN (SELECT MANAGER_ID FROM DEPARTMENTS);

SELECT * FROM EMPLOYEES 
WHERE MANAGER_ID IN (SELECT MANAGER_ID FROM DEPARTMENTS WHERE DEP_ID = 5);

SELECT DEPT_ID_DEP, DEP_NAME FROM DEPARTMENTS
WHERE MANAGER_ID IN (SELECT MANAGER_ID FROM EMPLOYEES WHERE SALARY > 70000);

-- 2. Implicit JOIN
SELECT * FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.MANAGER_ID = DEPARTMENTS.MANAGER_ID;

-- You can also use shorter aliases for table names
SELECT * FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.MANAGER_ID = D.MANAGER_ID;

SELECT E.F_NAME, D.DEP_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.MANAGER_ID = D.MANAGER_ID;

-- 3. JOIN operators (INNER JOIN, OUTER JOIN, etc)
SELECT DEPARTMENTS.DEP_NAME, EMPLOYEES.F_NAME, EMPLOYEES.L_NAME 
FROM DEPARTMENTS
INNER JOIN EMPLOYEES ON EMPLOYEES.MANAGER_ID = DEPARTMENTS.MANAGER_ID
ORDER BY DEPARTMENTS.DEP_NAME, EMPLOYEES.L_NAME DESC;
